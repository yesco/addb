clang minisquel.c && {

# header/formatting
./a.out 'select 1234567, 42' 
./a.out 'select 12345678, 42'

./a.out 'select 42'
./a.out 'select 3+4*2'
./a.out 'select 3+x, x+3'
./a.out 'select $lineno, i from int(1,5) i'

./a.out 'select i,+3, 1/3 from int(1,5) i'
./a.out 'select a,b,c,d from foo.csv as foo' 

# numbers
./a.out 'select 12345, 123456, 1234567, 12345678, 123456789'
./a.out 'select 0.1, 0.02, 0.003, 0.0004, 0.00005, 1.2e5 , 1.2e5, 9.9e99, 9.9e100, 1.2e5, 3' 
echo "== negatives, can be improved"
./a.out 'select -12345, -123456, -1234567, -12345678, -123456789'
./a.out 'select -0.1, -0.02, -0.003, -0.0004, -0.00005, -1.2e5 , -1.2e5, -9.9e99, -9.9e100, -1.2e5, -3'

# where clause
./a.out 'select 42, "foo"'
./a.out 'select 42, "foo" where 1=1'
./a.out 'select 42, "foo" where 1=0'
./a.out 'select 42, "foo" where 0.3*3+0.1=1+0.0'
./a.out 'select 42, "foo" where 0.3*3+0.1=1+0.00001'
./a.out 'select i, i*i from int(1,10) i where i*i>25'

# and
./a.out 'select 42 where 1=1 and 1=2'
./a.out 'select 42 where 1=1 and 2=2'
./a.out 'select 42 where not(1=1 and 2=1)'
./a.out 'select 42 where not(1=1 and 1=2)'

# functions
./a.out 'select plus(3,4)'
./a.out 'select plus(3)'
./a.out 'select plus(3,4,5)'
./a.out 'select add()'
./a.out 'select add(1,2,3)'
./a.out 'select add(3,foo,bar,fie,4)'

# strings
./a.out 'select foo as f, upper(f) as F, lower(F)'
./a.out 'select "A" as f, char(ascii(lower(f)))'

# aggregates
./a.out 'select count(i) from int(1,10) i'

# system
./a.out 'select type(NULL) as tnull, type(foo) as tstr, type(3.3) as tnumber, type(3) as tint'

# (workaround)
./a.out 'select 1 as foo, sum(foo) from int(1,10) i'
./a.out 'select count(i), sum(i), min(i), avg(i), max(i), stdev(i) from int(1,10) i'

# headers
./a.out 'select 42 as foo,null,1234567890,i+333333333 from int(1,3) as i'

# join!
./a.out 'select ta.a, tb.a from foo.csv ta, foo.csv tb where ta.a=tb.a'
./a.out 'select i,j,i*j from int(1,20) i, int(1,10) j where i=j'

echo "========== BUGS ==========="
./test-bugs
echo "^^^^^^^^^^ BUGS ^^^^^^^^^^^"

}
